local BFChatAddOn = LibStub('AceAddon-3.0'):NewAddon('BigFootChat','AceEvent-3.0','AceConsole-3.0','AceHook-3.0',"AceTimer-3.0") local L = LibStub('AceLocale-3.0'):GetLocale('BigFootChat') local MAX_PLAYER_LEVEL = MAX_PLAYER_LEVEL local BFC_IconTableMap={} local BFC_ReverseIconTableMap={} local BigFootChat_dd5fbfa5a6e2278bea0e15c976f3b6a8 = 10 local db local defaults = { profile = { enabletimestamp = false, enableOldChatFrameStyle = true, enableclasscolor = true, useshortname =true, enablecopy = false, enablechatchannelmove=true, enableRollButton=true, enableReportButton=true, enableRaidersButton=true, modules = { ["ICONFRAME"] = true, ["CHATFRAME"] = true, }, } } local events={ ["CHAT_MSG_YELL"]=true, ["CHAT_MSG_BN_WHISPER"]=true, ["CHAT_MSG_WHISPER"]=true, ["CHAT_MSG_WHISPER_INFORM"]=true, ["CHAT_MSG_SAY"]=true, ["CHAT_MSG_RAID_LEADER"]=true, ["CHAT_MSG_RAID"]=true, ["CHAT_MSG_RAID_WARNING"]=true, ["CHAT_MSG_PARTY"]=true, ["CHAT_MSG_PARTY_LEADER"]=true, ["CHAT_MSG_GUILD"]=true, ["CHAT_MSG_CHANNEL"]=true, ["CHAT_MSG_BATTLEGROUND"]=true, ["CHAT_MSG_DND"]=true, ["CHAT_MSG_OFFICER"]=true, } SCCN_Chan_Replace={ [L["Guild"]]=L["GuildShort"], [L["Raid"]]=L["RaidShort"], [L["Party"]]=L["PartyShort"], [L["Yell"]]=L["YellShort"], [L["BattleGround"]]=L["BattleGroundShort"], [L["General"]]=L["GeneralShort"], [L["Trade"]]=L["TradeShort"], [L["WorldDefense"]]=L["WorldDefenseShort"], [L["LocalDefense"]]=L["LocalDefenseShort"], [L["LFGChannel"]]=L["LFGChannelShort"], [L["BigFootChannel"]]=L["BigFootShort"], [L["WhisperTo"]]=L["WhisperToShort"], [L["WhisperFrom"]]=L["WhisperFromShort"],s } local isv3 = select(4,GetBuildInfo())<40000 local playerName local leaveChannelFunc = SlashCmdList["LEAVE"] local joinChannelFunc = function(channel) JoinTemporaryChannel(channel) local i = 1; while ( DEFAULT_CHAT_FRAME.channelList[i]) do if not DEFAULT_CHAT_FRAME.channelList[i]:find(L["BigFootChannel"]) then i = i + 1; else DEFAULT_CHAT_FRAME.channelList[i] = channel return end end DEFAULT_CHAT_FRAME.channelList[i] = channel end StaticPopupDialogs["BFC_COPYTEXT"] = { text = L["Press Ctrl-C to Copy the text"], hasEditBox = 1, maxLetters = 255, hasWideEditBox = isv3 and 1, button1 = ACCEPT, button2 = CANCEL, OnAccept = function(self) self:Hide() end, OnShow = function(self) if not BFChatAddOn.copyTextId then return end local temp=BFC_TextBuffer[tonumber(BFChatAddOn.copyTextId)] if isv3 then self.wideEditBox:SetText(temp or ""); self.wideEditBox:HighlightText(0) else self.editBox:SetText(temp or ""); self.editBox:HighlightText(0) end end, OnHide = function(self) if isv3 then self.wideEditBox:SetText(""); else self.editBox:SetText(""); end end, EditBoxOnEnterPressed = function(self) local parent = self:GetParent(); parent:Hide(); end, EditBoxOnEscapePressed = function(self) self:GetParent():Hide(); end, timeout = 0, whileDead = 1, hideOnEscape = 1 }; local function generateIconMap() for BigFootChat_63a9ce6f1eeac72ef41293b7d0303335,BigFootChat_8d0644c92128c1ff68223fd74ba63b56 in pairs(BFC_IconTable) do BFC_IconTableMap[BigFootChat_8d0644c92128c1ff68223fd74ba63b56[1]]=BigFootChat_8d0644c92128c1ff68223fd74ba63b56[2] end for BigFootChat_63a9ce6f1eeac72ef41293b7d0303335,BigFootChat_8d0644c92128c1ff68223fd74ba63b56 in pairs(BFC_IconTable) do BFC_ReverseIconTableMap[BigFootChat_8d0644c92128c1ff68223fd74ba63b56[2]]=BigFootChat_8d0644c92128c1ff68223fd74ba63b56[1] end end local function getTimeStamp() local hour = tonumber(string.sub(date("%x %X"), 10, 11)); local minute= tonumber(string.sub(date("%x %X"), 13, 14)); local second= tonumber(string.sub(date("%x %X"), 16, 17)); if( string.len(tostring(hour)) < 2) then hour = "0"..tostring(hour); end if( string.len(tostring(minute)) < 2) then minute = "0"..tostring(minute); end local TimeStamp = "[$h:$m]"; if db.enabletimestampsecond then if second <10 then TimeStamp = "[$h:$m:0$s]"; else TimeStamp = "[$h:$m:$s]"; end end TimeStamp = string.gsub(TimeStamp, "$h", hour); TimeStamp = string.gsub(TimeStamp, "$m", minute); TimeStamp = string.gsub(TimeStamp, "$s", second); return TimeStamp; end local function showTimeStamp(text) local TimeStamp = "|cff666666"..getTimeStamp(); text = TimeStamp.."|r "..text; return text end local function getpoint(point) local point,relPoint,relp,xoff,yoff=unpack(point) local relObj=_G[relPoint] return point,relObj,relp,xoff,yoff end local function setpoint(point,relObj,relp,xoff,yoff) return {point,relObj:GetName(),relp,xoff,yoff} end local function getCurrentFont() local _,font=SELECTED_CHAT_FRAME:GetFont() font=floor(font) local resIndex=GetCurrentResolution() local resolution = select( resIndex, GetScreenResolutions()); local w,h=string.match(resolution,"(%d+)x(%d+)") local myfont=(font*1.5)*h/768 return myfont end local function appendItemLink(text,id) text="|cff9de000|Hbfcnamecopyproof:"..id.."|hC|h|r"..text return text end local function showCopyTimeStamp(text,id) text="|cff9de000|Hbfcnamecopyproof:"..id.."|h"..getTimeStamp().."|h|r"..text return text; end local function IsBFChannelSysMessage(text) if text:find(L["JoinChannel1"]) and text:find(L["BigFootChannel"]) then return true end if text:find(L["LeaveChannel"]) and text:find(L["BigFootChannel"]) then return true end if text:find(L["ModifyChannel"]) and text:find(L["BigFootChannel"]) then return true end if text:find(L["OwnChannel"]) and text:find(L["BigFootChannel"]) then return true end if text:find(L["PasswordChange"]) and text:find(L["BigFootChannel"]) then return true end end local function IsBFChannelMessage(text) if text:find(L["BigFootChannel"]) then return true end end function BFC_Print(...) local str = ... SELECTED_CHAT_FRAME:AddMessage("|cff00adef["..L["BFChat"].."]|r"..str) end function BFCChatFrame_SavePos(self) local point,rel,relp,xoff,yoff=unpack(self.oripoint) db.frameposition=setpoint(point,rel,relp,xoff+self.endx-self.startx,yoff+self.endy-self.starty) self:SetPoint(getpoint(db.frameposition)) end function BFChatAddOn:ParseLocalText(text) for tag in string.gmatch(text, "|T([^:]+):%d+|t") do if ( BFC_ReverseIconTableMap[tag] ) then text = string.gsub(text, "|T[^:]+:%d+|t",BFC_ReverseIconTableMap[tag],1); return text,true end end return text,false end function BFChatAddOn:ParseText(text,font) if self.sneak then text = text:gsub(sender,replace) end local fontSize = getCurrentFont() for tag in string.gmatch(text, "({[^}]+})") do if ( BFC_IconTableMap[tag] ) then text = text:gsub(tag, "|T"..BFC_IconTableMap[tag] .. ":"..fontSize.."|t",1); break end end return text end function BFChatAddOn:ReverseParseText(text,font) for tag in string.gmatch(text, "|T([^:]+):"..font.."|t") do if ( BFC_ReverseIconTableMap[tag] ) then text = string.gsub(text, "|T[^:]+:"..font.."|t",BFC_ReverseIconTableMap[tag],1); end end return text end local function checkResetPassword(text) if text:find(L["OwnChannel"]) and text:find( playerName) then SetChannelPassword(BFChatAddOn.nextChannel or L["BigFootChannel"],"") end end local function getNextChannel(channelName) local i = 1 local cur if channelName:find(L["BigFootChannel"]) then cur = channelName:match("%d") if cur then i = tonumber(cur)+1 end return L["BigFootChannel"]..i end end local function S_AddMessage(self,text,r,g,b,id,addToStart) if text then if IsBFChannelSysMessage(text) then checkResetPassword(text) return end if IsBFChannelMessage(text) and db.mute then return end end if ( addToStart ) then self:ORG_AddMessage(text,r,g,b,id,addToStart) return end if event and events[event] then if ( db.useshortname ) then local temp = nil; if text then if strsub(event, 1, 10) ~= "CHAT_MSG_S" then for BigFootChat_63a9ce6f1eeac72ef41293b7d0303335,BigFootChat_8d0644c92128c1ff68223fd74ba63b56 in pairs(SCCN_Chan_Replace) do temp = string.gsub(text, " "..BigFootChat_63a9ce6f1eeac72ef41293b7d0303335.."]", BigFootChat_8d0644c92128c1ff68223fd74ba63b56.."%]", 1) temp = string.gsub(temp, BigFootChat_63a9ce6f1eeac72ef41293b7d0303335.."]", BigFootChat_8d0644c92128c1ff68223fd74ba63b56.."%]", 1) temp = string.gsub(temp, BigFootChat_63a9ce6f1eeac72ef41293b7d0303335.."：", BigFootChat_8d0644c92128c1ff68223fd74ba63b56.."：", 1) temp = string.gsub(temp, "^"..BigFootChat_63a9ce6f1eeac72ef41293b7d0303335, BigFootChat_8d0644c92128c1ff68223fd74ba63b56, 1) if temp ~= text then text = temp; temp = nil; break; end end end end end if text then text=BFChatAddOn:ParseText(text) BFC_TextIndex=(BFC_TextIndex or 0) BFC_TextIndex=BFC_TextIndex +1 BFC_TextBuffer=BFC_TextBuffer or {} BFC_TextBuffer[BFC_TextIndex]=text if db.enabletimestamp and db.enablecopy then text=showCopyTimeStamp(text,BFC_TextIndex) elseif db.enabletimestamp then text=showTimeStamp(text) elseif db.enablecopy then text=appendItemLink(text,BFC_TextIndex) end end end if self.ORG_AddMessage then self:ORG_AddMessage(text,r,g,b,id,addToStart); end end local function BFC_ChatFrameHandler_Recover(self,_event,...) event = _event local arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 = ... if( self.ORG_AddMessage ) then self.AddMessage = self.ORG_AddMessage end BFChatAddOn.hooks['ChatFrame_MessageEventHandler'](self,event,...) end local nameCache = {} local function BigFootChat_a4682fcd356d68eff3b3831597e07764(userName,frame) local currentTime = time() if not nameCache[userName..frame:GetName()] then return false end if currentTime - nameCache[userName..frame:GetName()] > (BigFootChat_dd5fbfa5a6e2278bea0e15c976f3b6a8 - 2) then return false end return true end local function BigFootChat_98052fcaa70c1bf8be2508b716a1faf8(userName,frame) nameCache[userName..frame:GetName()] = time() end local function BFC_ChatFrameHandler(self, _event, ...) event = _event local arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 = ... local userName = arg2 local channelName = arg4 if ( not event or not arg2 ) then BFChatAddOn.hooks['ChatFrame_MessageEventHandler'](self,event,...) return nil end if event =="CHAT_MSG_CHANNEL" and channelName:find(L["BigFootChannel"]) and text~="" then if BigFootChat_a4682fcd356d68eff3b3831597e07764(userName,self) then return else BigFootChat_98052fcaa70c1bf8be2508b716a1faf8(userName,self) end end if( not self.ORG_AddMessage ) then self.ORG_AddMessage = self.AddMessage self.AddMessage = S_AddMessage end BFChatAddOn.hooks['ChatFrame_MessageEventHandler'](self,event,...) end function BFChatAddOn:MaskSystemColoring(flag) if not BFCSystemCacheDB then BFCSystemCacheDB = {} end if flag then for _chatType,_table in pairs(ChatTypeInfo) do BFCSystemCacheDB[_chatType]=_table.colorNameByClass _table.colorNameByClass = true end else for _chatType,_isColoring in pairs(BFCSystemCacheDB) do ChatTypeInfo[_chatType].colorNameByClass = _isColoring end end end function BFChatAddOn:SetItemRef(link,text,button,chatFrame) if not string.find(link,"bfcnamecopyproof") then self.hooks['SetItemRef'](link,text,button,chatFrame) else local id=string.match(link,"%d+",1) self.copyTextId=id StaticPopup_Show("BFC_COPYTEXT") end end function BFChatAddOn:UnhookEvents() self:UnregisterAllEvents() end function BFChatAddOn:Refresh() BFCChatFrame:SetMovable(db.enablechatchannelmove) BFChatAddOn:MaskSystemColoring(db.enableclasscolor) if db and db.frameposition then BFCChatFrame:SetPoint(unpack(db.frameposition)) else BFCChatFrame:SetPoint("TOPLEFT",ChatFrame1,"BOTTOMLEFT",-5,-2) end end function BFChatAddOn:OnInitialize() self.db = LibStub("AceDB-3.0"):New("BFCDB", defaults, "Default") self.db.RegisterCallback(self, "OnProfileChanged", "Refresh") self.db.RegisterCallback(self, "OnProfileCopied", "Refresh") self.db.RegisterCallback(self, "OnProfileReset", "Refresh") self:RegisterEvent("CHAT_MSG_CHANNEL_NOTICE") self:RegisterEvent("CHANNEL_PASSWORD_REQUEST") UIParent:UnregisterEvent("CHANNEL_PASSWORD_REQUEST") SlashCmdList["CHAT_PASSWORD"] = nil db = self.db.profile realmdb = self.db.realm self:SetupOptions() generateIconMap() playerName = UnitName("player") end local function BigFootChat_84ad48e612a92b69c1b98d3185056f3c(editbox) editbox:SetAttribute("bfwhispermode","true") end local function BigFootChat_3eca70aa558d6bc043280757ebe23e94(editbox) editbox:SetAttribute("bfwhispermode",nil) end local function BigFootChat_8789b1a0b4da92efd2a9bb111a773e4c(editbox,name,val) if name == "bfwhispermode" then if not editbox.bfChatType then editbox.bfChatType ="SAY" end if not val then editbox:SetAttribute("chatType", editbox.bfChatType); ChatEdit_UpdateHeader(editbox); end end end local lastTalkTime local function BigFootChat_9475a5cdff4dc46797d47d28084e3a98() local currentTime = time() if not lastTalkTime then return false end if currentTime - lastTalkTime > BigFootChat_dd5fbfa5a6e2278bea0e15c976f3b6a8 then return false end return true end local function BigFootChat_e5268000b16333be36edc45273ef22a2() lastTalkTime = time() end function BFChatAddOn:EnableOldStyleReply() hooksecurefunc("ChatEdit_SendText", function(editBox,...) local type = editBox:GetAttribute("chatType"); local text = editBox:GetText(); if (text and type ~= "WHISPER" and type ~= "BN_WHISPER") then editBox.bfChatType = type; end; if type=="CHANNEL" and text and text~="" and tonumber(editBox:GetAttribute("channelTarget")) == getBigFootChannel() then if BigFootChat_9475a5cdff4dc46797d47d28084e3a98() then BFC_Print(L["Please Do Not Talk Too Fast"]) return else BigFootChat_e5268000b16333be36edc45273ef22a2() end end end); hooksecurefunc("ChatEdit_OnEscapePressed", function(editBox) BigFootChat_3eca70aa558d6bc043280757ebe23e94(editBox) end); ChatFrame1EditBox:SetScript("OnAttributeChanged",function(...) if (db.enableOldChatFrameStyle ) then BigFootChat_8789b1a0b4da92efd2a9bb111a773e4c(...) end end) hooksecurefunc("ChatFrame_ReplyTell", function(chatFrame) local editBox = ChatEdit_ChooseBoxForSend(chatFrame); BigFootChat_84ad48e612a92b69c1b98d3185056f3c(editBox) end); hooksecurefunc("ChatFrame_ReplyTell2",function(chatFrame) local editBox = ChatEdit_ChooseBoxForSend(chatFrame); BigFootChat_84ad48e612a92b69c1b98d3185056f3c(editBox) end); end function BFChatAddOn:IsDisplayChannelOwner() local selectIndex = GetSelectedDisplayChannel() if selectIndex >0 then local channelName = GetChannelDisplayInfo(selectIndex) if channelName:find(L["BigFootChannel"]) then return false end end return self.hooks['IsDisplayChannelOwner']() end function BFChatAddOn:GetChannelRosterInfo(...) local name, owner, moderator, muted, active, enabled = self.hooks['GetChannelRosterInfo'](...) local channelIndex = ... if GetChannelDisplayInfo(channelIndex):find( L["BigFootChannel"]) then owner = nil moderator = nil end return name, owner, moderator, muted, active, enabled end function BFChatAddOn:CHAT_MSG_CHANNEL_NOTICE(...) local _,message,_,_,_,_,_,_,_,channelName = ... if message =="YOU_JOINED" and not channelName:find(L["BigFootChannel"]) then self:CancelTimer(self.timer, true) self.timer = self:ScheduleTimer(function() joinChannelFunc(L["BigFootChannel"]) end,2) end end function BFChatAddOn:CHANNEL_PASSWORD_REQUEST(...) local _,channelName = ... if channelName:find(L["BigFootChannel"]) then self.nextChannel = getNextChannel(channelName) joinChannelFunc(self.nextChannel) else local dialog = StaticPopup_Show("CHAT_CHANNEL_PASSWORD", channelName); if ( dialog ) then dialog.data = channelName; end return; end end function BFChatAddOn:FCF_FadeInChatFrame(chatFrame) BFChannelMuteButton:Show() UIFrameFadeIn(BFChannelMuteButton, CHAT_FRAME_FADE_TIME, 0.5, 1); if ChannelFilterMuteButton then ChannelFilterMuteButton:Show() UIFrameFadeIn(ChannelFilterMuteButton, CHAT_FRAME_FADE_TIME, 0.5, 1); end end function BFChatAddOn:FCF_FadeOutChatFrame(chatFrame) UIFrameFadeOut(BFChannelMuteButton, CHAT_FRAME_FADE_OUT_TIME, BFChannelMuteButton:GetAlpha(), 0); if ChannelFilterMuteButton then UIFrameFadeOut(ChannelFilterMuteButton, CHAT_FRAME_FADE_OUT_TIME, ChannelFilterMuteButton:GetAlpha(), 0); end end function BFChatAddOn:OnEnable() if self:IsHooked('ChatFrame_MessageEventHandler') then self:Unhook('ChatFrame_MessageEventHandler') end self:RawHook('ChatFrame_MessageEventHandler',BFC_ChatFrameHandler,true) self:RawHook('SetItemRef',true) self:RawHook('IsDisplayChannelOwner',true) self:RawHook('GetChannelRosterInfo',true) self:SecureHook("FCF_FadeInChatFrame") self:SecureHook("FCF_FadeOutChatFrame") self:EnableOldStyleReply() BFChannel_RefreshMuteButton() if not db.isTempChannel then leaveChannelFunc(L["BigFootChannel"]) db.isTempChannel = true end UIParent_ManageFramePositions() end function BFChatAddOn:OnDisable() if self:IsHooked('ChatFrame_MessageEventHandler') then self:Unhook('ChatFrame_MessageEventHandler') end self:RawHook('ChatFrame_MessageEventHandler',BFC_ChatFrameHandler_Recover,true) self:Unhook('SetItemRef'); self:UnhookEvents() end function BFChatAddOn:GetModuleEnabled(module) return db.modules[module] end function BFChatAddOn:SetModuleEnabled(module, value) local old = db.modules[module] db.modules[module] = value if old ~= value then if value then self:EnableModule(module) else self:DisableModule(module) end end end function BFChannel_RefreshMuteButton() if db.mute then BFChannelMuteButtonMute:Show() else BFChannelMuteButtonMute:Hide() end end function BFChannelMuteButton_OnClick() db.mute = not db.mute if db.mute then BFC_Print(L["BigFoot Channel has been blocked"]) else BFC_Print(L["BigFoot Channel has been unblocked"]) end BFChannel_RefreshMuteButton() end function ChangeSet() hooksecurefunc("UIParent_ManageFramePositions", function() if ( DEFAULT_CHAT_FRAME:IsUserPlaced() ) then if ( SIMPLE_CHAT ~= "1" ) then return; end end if not BFChatAddOn:GetModule("CHATFRAME"):IsEnabled() then return end local chatOffset = 85; if ( GetNumShapeshiftForms() > 0 or HasPetUI() or PetHasActionBar() ) then if ( MultiBarBottomLeft:IsShown() ) then chatOffset = chatOffset + 55; else chatOffset = chatOffset + 15; end elseif ( MultiBarBottomLeft:IsShown() ) then chatOffset = chatOffset + 15; end DEFAULT_CHAT_FRAME:SetPoint("BOTTOMLEFT", "UIParent", "BOTTOMLEFT", 32, chatOffset+25); end) hooksecurefunc("ResetChatWindows",function() DEFAULT_CHAT_FRAME:SetUserPlaced(false) end) end function BFChatAddOn:BFChannelRollButton_OnClick() self.db.profile.enableRollButton = not self.db.profile.enableRollButton if self.db.profile.enableRollButton then BFCIconFrameRollButton:Show() else BFCIconFrameRollButton:Hide() end end function BFChatAddOn:BFChannelReportButton_OnClick() self.db.profile.enableReportButton = not self.db.profile.enableReportButton if self.db.profile.enableReportButton then BFCIconFrameReportButton:Show() else BFCIconFrameReportButton:Hide() end end function BFChatAddOn:BFChannelRaidersButton_OnClick() self.db.profile.enableRaidersButton = not self.db.profile.enableRaidersButton if GetLocale() == "zhCN" then createRaidersFrame(); end end _G.BigFootChat = BFChatAddOn 
