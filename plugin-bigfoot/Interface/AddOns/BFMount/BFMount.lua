--[[ 1. UI面板:实现一件召唤坐骑选择的界面. 1.1: 在原有系统坐骑排列的界面增加按钮以召唤坐骑选择面板 1.2: 坐骑选择面板分为3部分： 1.2.1:按次序排列坐骑 1.2.2:坐骑分类tab 1.2.3:生成随机选择坐骑范围的按钮 2. 在用户使用的宏中添加一个坐骑宏， 2.1: 此宏能够检查插件有效性（是否被装载） 2.2: 此宏能调用插件提供的随机选择功能。 3. 按钮生成后在快捷技能栏上产生一新按钮，此按钮可以拖动至技能栏中 ]] local BFMount_cd90d605cf08ef4369a709656b4fbe01 = "/cancelform\n" local BFMount_64d0c43186a8628552b03cc0f0c6ac59= "/bfmount" local BFMount_7a18f28975b35f17a39d9d93da2af651 local BFMount_7a0356b89ed6597e61c1a54ebf6e1d67 local BFMount_5df3704e3f57f96fcd4a46a77037703b if GetLocale()=="zhCN" then BFMount_7a18f28975b35f17a39d9d93da2af651="坐骑增强" BFMount_7a0356b89ed6597e61c1a54ebf6e1d67="随机坐骑生成" BFMount_007e9cf5b81caefc919d41382e9f1a70="全部选择" BFMount_1c72b2a42e8d1e53ee016381d04bde94="全部取消" BFMount_b55a3427d0a74292ac50e21ad8390902 = {"全部","慢速坐骑", "快速坐骑","慢速飞行","快速飞行","特殊坐骑"} BFMount_5df3704e3f57f96fcd4a46a77037703b="骑术" BFM_AD_TEXT="everwar开源魔兽(https://everwar.cn)" BFMount_3ed976f5893036001b61b23b61abdc66 = "冬拥湖" elseif GetLocale()=="zhTW" then BFMount_7a18f28975b35f17a39d9d93da2af651="坐騎增強" BFMount_7a0356b89ed6597e61c1a54ebf6e1d67="隨機坐騎生成" BFMount_007e9cf5b81caefc919d41382e9f1a70="全部選擇" BFMount_1c72b2a42e8d1e53ee016381d04bde94="全部取消" BFMount_b55a3427d0a74292ac50e21ad8390902 = {"全部","慢速坐騎","快速坐騎","慢速飛行","快速飛行","特殊坐骑"} BFMount_5df3704e3f57f96fcd4a46a77037703b="騎術" BFM_AD_TEXT="178遊戲網（warmane.cn）" BFMount_3ed976f5893036001b61b23b61abdc66 = "冬握湖" else BFMount_7a18f28975b35f17a39d9d93da2af651="Mount Enhance" BFMount_7a0356b89ed6597e61c1a54ebf6e1d67="Random Mount Generate" BFMount_007e9cf5b81caefc919d41382e9f1a70="Select All" BFMount_1c72b2a42e8d1e53ee016381d04bde94="Select None" BFMount_b55a3427d0a74292ac50e21ad8390902 = {"All Mount","Slow Mount","Fast Mount","Slow Fly Mount","Fast Fly Mount","Special Mount","Mounting Words"} BFMount_5df3704e3f57f96fcd4a46a77037703b="Riding" BFM_AD_TEXT="178 Gaming(warmane.cn)" BFMount_3ed976f5893036001b61b23b61abdc66 = "Wintergrasp" end BFMount = LibStub('AceAddon-3.0'):NewAddon('BigFootMount', 'AceEvent-3.0', 'AceConsole-3.0') local function loadDefaultConfig() return {} end BFMountDB = BFMountDB or loadDefaultConfig() SLASH_BFMOUNT1="/bfmount" local BFMOUNT_MACRONAME="BF_Mount" local BFMOUNT_MACROICONINDEX=224 local mountFrame local macroIndex local BFMOUNT_ICONPERROW=6 local BFMOUNT_NUMROW=7 local mountSkill local creatureTable local function BFMount_894e4ccaade5f029eb6b6d730fc87e44() creatureTable = {} local mountNum = GetNumCompanions("MOUNT") for i = 1, mountNum do local _,_, spellID = GetCompanionInfo("MOUNT", i); creatureTable[spellID] = i end end local function getMountSkillLevel() local num=GetNumSkillLines() for i=1,num do local name,_,_,BFMount_23e40bb9c7dd1d83c682b4c234666e95=GetSkillLineInfo(i) if name==BFMount_5df3704e3f57f96fcd4a46a77037703b then return BFMount_23e40bb9c7dd1d83c682b4c234666e95 end end return 0 end local function clearMountButtons() for i=1,6 do for _,BFMount_8d0644c92128c1ff68223fd74ba63b56 in pairs(mountFrame.mountButtontype[i]) do BFMount_8d0644c92128c1ff68223fd74ba63b56:ClearAllPoints() BFMount_8d0644c92128c1ff68223fd74ba63b56:Hide() end end end local function reversesort(a,b) if not a then return true end if not b then return false end if not a.creatureName then return true end if not b.creatureName then return false end if string.reverse(a.creatureName)>string.reverse(b.creatureName) then return true else return false end end local function createMountFrame() mountFrame=_G.BFMountFrame mountFrame.mountButtontype={{},{},{},{},{},{}} for i=1,6 do _G["BFMountFrameTab"..i].tabText=BFMount_b55a3427d0a74292ac50e21ad8390902[i] end local buttonChecked=false local createMountButton = function(i) local creatureID, creatureName, spellID, icon, active = GetCompanionInfo("MOUNT", i); if not creatureID then return false end local button = _G["BFMountButton"..i] or CreateFrame("CheckButton","BFMountButton"..i,mountFrame,"BFMountButtonTemplate") button.creatureID = creatureID button.creatureName = creatureName button.spellID = spellID button.active = active; button:SetNormalTexture(icon); button:Enable(); if BFMountDB[button.spellID] then button:SetChecked(1) buttonChecked=true else button:SetChecked(nil) end return button end local function getButtonType(button, i) if not BFMData then return false end if not button or not button.spellID then return false end if BFMData[i][button.spellID] then return true end return false end local createMountButtons = function() local mountNum = GetNumCompanions("MOUNT") for i=1,mountNum do local button = createMountButton(i) if button then tinsert(mountFrame.mountButtontype[1],button) end end for i=1,5 do for j=1,mountNum do local button=createMountButton(j) if button then local buttonType=getButtonType(button,i) if buttonType then tinsert(mountFrame.mountButtontype[i+1],button) end end end end for i=1,6 do pcall (sort,mountFrame.mountButtontype[i],reversesort) end end local setupFrame = function() _G[mountFrame:GetName().."SaveListText"]:SetText(BFMount_7a0356b89ed6597e61c1a54ebf6e1d67) _G[mountFrame:GetName().."SelectAllText"]:SetText(BFMount_007e9cf5b81caefc919d41382e9f1a70) _G[mountFrame:GetName().."SelectNoneText"]:SetText(BFMount_1c72b2a42e8d1e53ee016381d04bde94) mountFrame:Show() end setupFrame() createMountButtons() if not buttonChecked then _G[mountFrame:GetName().."SaveList"]:Disable() else _G[mountFrame:GetName().."SaveList"]:Enable() end _G[mountFrame:GetName().."Tab1"]:SetChecked(1) BFMount_MountTabOnClick(nil,1) end local function showMountFrame() ShowUIPanel(mountFrame) end local function hideMountFrame() HideUIPanel(mountFrame) end local function toggleMountFrame() if mountFrame:IsShown() then hideMountFrame() else showMountFrame() end end local function createMountMacro() macroIndex = GetMacroIndexByName(BFMOUNT_MACRONAME) local text if select(2,UnitClass("Player")) == "DRUID" then text = BFMount_cd90d605cf08ef4369a709656b4fbe01 .. BFMount_64d0c43186a8628552b03cc0f0c6ac59 else text = BFMount_64d0c43186a8628552b03cc0f0c6ac59 end if macroIndex == 0 then macroIndex = CreateMacro(BFMOUNT_MACRONAME,BFMOUNT_MACROICONINDEX,text) else macroIndex = EditMacro(macroIndex, BFMOUNT_MACRONAME, BFMOUNT_MACROICONINDEX, text) end end local function hideMountCallOutButton() _G.BFMountFrameCallOutButton:Hide() end local function attachMountCallOutButton() local button=_G.BFMountFrameCallOutButton local function setupButton() button:SetPoint("BOTTOMRIGHT",_G.PetPaperDollFrameCompanionFrame,"BOTTOMRIGHT",-47,88) _G[button:GetName().."Text"]:SetText(BFMount_7a18f28975b35f17a39d9d93da2af651) button:Show() end setupButton() end local function doSelectMount(spellID) BFMountDB[spellID]=true _G[mountFrame:GetName().."SaveList"]:Enable() end local function doUnselectMount(spellID) BFMountDB[spellID]=nil for BFMount_63a9ce6f1eeac72ef41293b7d0303335,BFMount_8d0644c92128c1ff68223fd74ba63b56 in pairs(BFMountDB) do if BFMount_8d0644c92128c1ff68223fd74ba63b56 then return end end _G[mountFrame:GetName().."SaveList"]:Disable() end local function BF_IsFlyable() if not IsFlyableArea() or (GetWintergraspWaitTime()==nil and GetZoneText()==BFMount_3ed976f5893036001b61b23b61abdc66) then return false else return true end end function doRandomMount() canCastSpell=function(spellID) if mountSkill==0 then mountSkill=getMountSkillLevel() end if mountSkill>0 and mountSkill<225 then if BFMData[1][spellID] or BFMData[2][spellID] then return true end else if BF_IsFlyable() then if BFMData[3][spellID] or BFMData[4][spellID] or BFMData[5][spellID] then return true else return false end else if BFMData[1][spellID] or BFMData[2][spellID] then return true end end end return false end local temptable={} for BFMount_63a9ce6f1eeac72ef41293b7d0303335,BFMount_8d0644c92128c1ff68223fd74ba63b56 in pairs(BFMountDB) do if BFMount_8d0644c92128c1ff68223fd74ba63b56 and canCastSpell(BFMount_63a9ce6f1eeac72ef41293b7d0303335)then tinsert(temptable,creatureTable[BFMount_63a9ce6f1eeac72ef41293b7d0303335]) end end local size=getn(temptable) if size < 1 then return end local index=random(size) local mountIndex=temptable[index] CallCompanion("MOUNT",mountIndex) end function BFMount_MountTabOnClick(self,index) for i=1,6,1 do if i~=index then _G["BFMountFrameTab"..i]:SetChecked(0); else _G["BFMountFrameTab"..i]:SetChecked(1); end end _G[mountFrame:GetName().."SaveList"]:Show() _G[mountFrame:GetName().."SelectAll"]:Show() _G[mountFrame:GetName().."SelectNone"]:Show() _G[mountFrame:GetName().."ScrollFrame"]:Show() mountFrame.selectIndex=index clearMountButtons() BFMount_ScrollUpdate() end function BFMount_SelectAllOnClick() for BFMount_63a9ce6f1eeac72ef41293b7d0303335,BFMount_8d0644c92128c1ff68223fd74ba63b56 in pairs(mountFrame.mountButtontype[mountFrame.selectIndex]) do BFMount_8d0644c92128c1ff68223fd74ba63b56:SetChecked(1) doSelectMount(BFMount_8d0644c92128c1ff68223fd74ba63b56.spellID) end end function BFMount_SelectNoneOnClick() for BFMount_63a9ce6f1eeac72ef41293b7d0303335,BFMount_8d0644c92128c1ff68223fd74ba63b56 in pairs(mountFrame.mountButtontype[mountFrame.selectIndex]) do BFMount_8d0644c92128c1ff68223fd74ba63b56:SetChecked(0) doUnselectMount(BFMount_8d0644c92128c1ff68223fd74ba63b56.spellID) end end function BFMount_CastRandomMount(cmd,editbox) if not IsMounted() then doRandomMount() else Dismount() end end function BFMount_TabOnEnter(self) GameTooltip:SetOwner(self, "ANCHOR_RIGHT",20,-25); GameTooltip:SetText(self.tabText); end function BFMount_ScrollUpdate() local num= ceil(getn(mountFrame.mountButtontype[mountFrame.selectIndex])/BFMOUNT_ICONPERROW) local _offset = FauxScrollFrame_GetOffset(BFMountFrameScrollFrame); local startIndex= _offset * BFMOUNT_ICONPERROW local endIndex= (_offset+BFMOUNT_NUMROW) * BFMOUNT_ICONPERROW local count=0 for BFMount_63a9ce6f1eeac72ef41293b7d0303335,BFMount_8d0644c92128c1ff68223fd74ba63b56 in pairs(mountFrame.mountButtontype[mountFrame.selectIndex]) do if BFMount_63a9ce6f1eeac72ef41293b7d0303335<=startIndex or BFMount_63a9ce6f1eeac72ef41293b7d0303335 >endIndex then BFMount_8d0644c92128c1ff68223fd74ba63b56:ClearAllPoints() BFMount_8d0644c92128c1ff68223fd74ba63b56:Hide() else BFMount_8d0644c92128c1ff68223fd74ba63b56:SetPoint("TOPLEFT",mountFrame:GetName(),"TOPLEFT",((BFMount_63a9ce6f1eeac72ef41293b7d0303335-startIndex-1)%BFMOUNT_ICONPERROW)*40+20,floor((BFMount_63a9ce6f1eeac72ef41293b7d0303335-startIndex-1)/BFMOUNT_ICONPERROW)*(-40)-40) BFMount_8d0644c92128c1ff68223fd74ba63b56:Show() end end FauxScrollFrame_Update(BFMountFrameScrollFrame, num, BFMOUNT_NUMROW, 20); end function BFMount_ShowMountPanelOnClick() toggleMountFrame() end function BFMount_GenerateMountButtonOnClick() local _,texture = GetMacroInfo(macroIndex) mountMacroButton=_G.BFMountMacroButton _G[mountMacroButton:GetName().."IconTexture"]:SetTexture(texture) _G[mountMacroButton:GetName().."Flash"]:Show() mountMacroButton:Enable() mountMacroButton:Show() end function BFMount_MountButtonOnClick(self) if not self:GetChecked() then self:SetChecked(0) doUnselectMount(self.spellID) else self:SetChecked(1) doSelectMount(self.spellID) end PetPaperDollFrame_SetTab(3); PetPaperDollFrameCompanionFrame.idMount = self.creatureID; for i=1,12 do _G["CompanionButton"..i]:SetChecked(0) _G["CompanionButton"..i.."ActiveTexture"]:Hide(); end PetPaperDollFrame_UpdateCompanionPreview(); end function BFMount_MountButtonOnDrag(self,button) if self and self:IsShown() then self:Hide() self:Disable() end if (button=="LeftButton") then PickupMacro(BFMOUNT_MACRONAME) end end function BFMount:COMPANION_UNLEARNED() BigFoot_DelayCall( BFMount_894e4ccaade5f029eb6b6d730fc87e44,1) end function BFMount:COMPANION_LEARNED() BigFoot_DelayCall( BFMount_894e4ccaade5f029eb6b6d730fc87e44,1) end function BFMount:OnInitialize() createMountMacro() createMountFrame() attachMountCallOutButton() SlashCmdList["BFMOUNT"] = BFMount_CastRandomMount self:RegisterEvent("COMPANION_LEARNED") self:RegisterEvent("COMPANION_UNLEARNED") mountSkill=getMountSkillLevel() end function BFMount:OnEnable() BigFoot_DelayCall(BFMount_894e4ccaade5f029eb6b6d730fc87e44,2) _G.BFMountFrameCallOutButton:Show() end function BFMount:OnDisable() hideMountCallOutButton() hideMountFrame() end
