 local BSec_dbdf11f5b07258936fb1c5a31eaa969c = 1; local BSec_1b5523f0adb45c4b8ee51f89ebf6f2b2 = 0; local BScale = {}; local function BSec_391d78be8cd75f94fdabb3c3607320f6(BSec_411b8aa6d5954c6020f0b9c9e80e847a, BSec_1346009d8936868590c1d007e3efcfae) BSec_1346009d8936868590c1d007e3efcfae = BSec_1346009d8936868590c1d007e3efcfae or UIParent; local BSec_4e0a062a388e29d4bf2e9c2dba5d6d18 = BSec_1346009d8936868590c1d007e3efcfae:GetRight()/BSec_411b8aa6d5954c6020f0b9c9e80e847a:GetScale(); local BSec_4845dcb186992213ddd66d11d248ca10 = BSec_1346009d8936868590c1d007e3efcfae:GetTop()/BSec_411b8aa6d5954c6020f0b9c9e80e847a:GetScale(); local BSec_0273923d6c5c6a7963a964a97885cb41 = BSec_411b8aa6d5954c6020f0b9c9e80e847a:GetRight(); local BSec_4d1cba81a5f3aaeb91e0bbb6dd482b32 = BSec_411b8aa6d5954c6020f0b9c9e80e847a:GetTop(); local BSec_05046f3bd52e7289c52881d983bc7179 = BSec_411b8aa6d5954c6020f0b9c9e80e847a:GetLeft(); local BSec_79af1dd4b579612573bca88bd9393bca = BSec_411b8aa6d5954c6020f0b9c9e80e847a:GetBottom(); if (BSec_0273923d6c5c6a7963a964a97885cb41 and BSec_4d1cba81a5f3aaeb91e0bbb6dd482b32 and BSec_05046f3bd52e7289c52881d983bc7179 and BSec_79af1dd4b579612573bca88bd9393bca) then local BSec_b254e387cf58e982ba24fcb3e8a63995 = (BSec_0273923d6c5c6a7963a964a97885cb41 > BSec_4e0a062a388e29d4bf2e9c2dba5d6d18 and (BSec_4e0a062a388e29d4bf2e9c2dba5d6d18-BSec_0273923d6c5c6a7963a964a97885cb41)) or (BSec_05046f3bd52e7289c52881d983bc7179 < 0 and (0-BSec_05046f3bd52e7289c52881d983bc7179)) or 0; local BSec_a0f453fd098c0b0fda780f69cda6ffbf = (BSec_4d1cba81a5f3aaeb91e0bbb6dd482b32 > BSec_4845dcb186992213ddd66d11d248ca10 and (BSec_4845dcb186992213ddd66d11d248ca10-BSec_4d1cba81a5f3aaeb91e0bbb6dd482b32)) or (BSec_79af1dd4b579612573bca88bd9393bca < 0 and (0-BSec_79af1dd4b579612573bca88bd9393bca)) or 0; BSec_b254e387cf58e982ba24fcb3e8a63995 = (BSec_b254e387cf58e982ba24fcb3e8a63995 + BSec_05046f3bd52e7289c52881d983bc7179); BSec_a0f453fd098c0b0fda780f69cda6ffbf = (BSec_a0f453fd098c0b0fda780f69cda6ffbf + BSec_4d1cba81a5f3aaeb91e0bbb6dd482b32); if (BSec_b254e387cf58e982ba24fcb3e8a63995~=0 or BSec_a0f453fd098c0b0fda780f69cda6ffbf~=0) then BSec_411b8aa6d5954c6020f0b9c9e80e847a:SetPoint("TOPLEFT", BSec_1346009d8936868590c1d007e3efcfae, "BOTTOMLEFT",BSec_b254e387cf58e982ba24fcb3e8a63995, BSec_a0f453fd098c0b0fda780f69cda6ffbf); end end end function BScale:SetPoint(BSec_411b8aa6d5954c6020f0b9c9e80e847a, BSec_7dce5c33f0d4836b30c14f18b2fc43f7,BSec_ca419ffef1b6a70d3765ee23720dcdb7,relativePoint, BSec_b0e97041a98efeaf027801ac5f63b882, BSec_fc1a2e8123dbe055ed6fd6d145898303) local BSec_1346009d8936868590c1d007e3efcfae = BSec_411b8aa6d5954c6020f0b9c9e80e847a:GetParent() or UIParent; BSec_b0e97041a98efeaf027801ac5f63b882 = BSec_b0e97041a98efeaf027801ac5f63b882/BSec_1346009d8936868590c1d007e3efcfae:GetScale(); BSec_fc1a2e8123dbe055ed6fd6d145898303 = BSec_fc1a2e8123dbe055ed6fd6d145898303/Parnet:GetScale(); BSec_411b8aa6d5954c6020f0b9c9e80e847a:SetPoint(BSec_7dce5c33f0d4836b30c14f18b2fc43f7,BSec_ca419ffef1b6a70d3765ee23720dcdb7,relativePoint, BSec_b0e97041a98efeaf027801ac5f63b882, BSec_fc1a2e8123dbe055ed6fd6d145898303); BSec_391d78be8cd75f94fdabb3c3607320f6(BSec_411b8aa6d5954c6020f0b9c9e80e847a, BSec_1346009d8936868590c1d007e3efcfae); end local function BSec_e850d39c00b42c6c8a2873ebee73e4a5(BSec_411b8aa6d5954c6020f0b9c9e80e847a, BSec_6188847d8059cc6f73041de255401a71) if (not (BSec_411b8aa6d5954c6020f0b9c9e80e847a:GetTop() and BSec_411b8aa6d5954c6020f0b9c9e80e847a:GetLeft())) then return nil; end local BSec_b254e387cf58e982ba24fcb3e8a63995 = BSec_411b8aa6d5954c6020f0b9c9e80e847a:GetLeft() * BSec_411b8aa6d5954c6020f0b9c9e80e847a:GetScale() / BSec_6188847d8059cc6f73041de255401a71; local BSec_a0f453fd098c0b0fda780f69cda6ffbf = BSec_411b8aa6d5954c6020f0b9c9e80e847a:GetTop() * BSec_411b8aa6d5954c6020f0b9c9e80e847a:GetScale() / BSec_6188847d8059cc6f73041de255401a71; return BSec_b254e387cf58e982ba24fcb3e8a63995, BSec_a0f453fd098c0b0fda780f69cda6ffbf; end function BScale:SetScale(BSec_411b8aa6d5954c6020f0b9c9e80e847a, BSec_6188847d8059cc6f73041de255401a71) assert(type(BSec_6188847d8059cc6f73041de255401a71) == "number", "Invalid <scale>, the type of scale must be number."); local BSec_b254e387cf58e982ba24fcb3e8a63995, BSec_a0f453fd098c0b0fda780f69cda6ffbf = BSec_e850d39c00b42c6c8a2873ebee73e4a5(BSec_411b8aa6d5954c6020f0b9c9e80e847a, BSec_6188847d8059cc6f73041de255401a71); BSec_411b8aa6d5954c6020f0b9c9e80e847a:SetScale(BSec_6188847d8059cc6f73041de255401a71); BSec_411b8aa6d5954c6020f0b9c9e80e847a:ClearAllPoints(); BSec_411b8aa6d5954c6020f0b9c9e80e847a:SetPoint("TOPLEFT", UIParent, "BOTTOMLEFT", BSec_b254e387cf58e982ba24fcb3e8a63995, BSec_a0f453fd098c0b0fda780f69cda6ffbf); BSec_391d78be8cd75f94fdabb3c3607320f6(BSec_411b8aa6d5954c6020f0b9c9e80e847a); end function BScale:StartScaling(button) if ( button == "LeftButton" ) then self.frame:LockHighlight(); local frame = self.frame:GetParent(); self.FrameToScale = frame; self.ScalingWidth = frame:GetWidth(); local oldscale, framescale = frame:GetEffectiveScale(), frame:GetScale(); local topleftX, cursorX = frame:GetLeft() * oldscale, GetCursorPosition(); self.ScaleX = TrinketMenu.ScalingWidth * framescale / (cursorX - topleftX); self.frame.updateframe:Show(); end end function BScale:StopScaling(button) if ( button == "LeftButton" ) then self.frame.updateframe:Hide(); self.frame:UnlockHighlight(); self.scale = self.FrameToScale:GetScale(); self.FrameToScale = nil end end function BScale:Scaling() local frame = self.FrameToScale; local oldscale = frame:GetEffectiveScale(); local frameX, cursorX = frame:GetLeft() * oldscale, GetCursorPosition(); cursorX = frameX + (cursorX - frameX) * self.ScaleX; if ((cursorX - frameX) > self.minwidth) then local newscale = (cursorX-frameX) / self.ScalingWidth; self:SetScale(frame, newscale); end end function BScale:Create(parent, width, height, minwidth) assert(type(parent) == "table", "BScale: The frame to scale must be a UI Object."); assert(type(width) == "number", "BScale: The parameter width must be a number vale."); assert(type(height) == "number", "BScale: The parameter height must be a number vale."); local minwidth = type(minwidth) == "number" and minwidth or 32; slef.minwidth = minwidth; self.frame = CreateFrame("Button", parent:GetName() .. "Resize", parent); self.frame:SetNormalTexture("Interface\\AddOns\\BigFoot\\Library\\Artworks\\ResizeButton"); self.frame:SetHighlightTexture("Interface\\AddOns\\BigFoot\\Library\\Artworks\\ResizeButton"); self.frame:SetWidth(width); self.frame:SetHeight(height); self.frame:SetPoint("BOTTOMRIGHT", parent, "BOTTOMRIGHT", 0, 0); self.frame.updateframe = CreateFrame("Frame", nil, self.frame); self.scale = 1; self.frame:SetScript("OnLoad", function(self) self:SetFrameLevel(self:GetFrameLevel()+2); end); self.frame:SetScript("OnMouseDown", function(self, button) BScale:StartScaling(button); end); self.frame:SetScript("OnMouseUp", function(self, button) BScale:StopScaling(button); end); self.frame.updateframe:SetScript("OnUpdate", function(self) BScale:Scaling(); end); end function BScale:InitScale(scale) if (self.frame) then self:SetScale(self.frame:GetParent(), scale); end end function BScale:GetScale() if (self.frame) then return self.scale; else return nil; end end function BScale:ClearAllPoints() if (self.frame) then self.frame:ClearAllPoints(); end end function BScale:SetPoint(...) if (self.frame) then self.frame:SetPoint(...); end end function BScale:SetWidth(width) if (self.frame) then self.frame:SetWidth(width); end end function BScale:SetHeight(height) if (self.frame) then self.frame:SetHeight(height); end end function BScale:constructor(parent, width, height, minwidth) if (parent and width and height) then self:Create(parent, width, height); end end BLibrary:Register(BScale,"BScale",BSec_dbdf11f5b07258936fb1c5a31eaa969c,BSec_1b5523f0adb45c4b8ee51f89ebf6f2b2);
