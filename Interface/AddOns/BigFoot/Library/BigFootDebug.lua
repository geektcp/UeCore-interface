 local BLDebug0011110010011010110001101 = 1 local BLDebug100100110011110001011001110001000101 = 0 BDebug = {} BDebug.BLDebug000100010001011010110110101 = {} BDebug.BLDebug111000011011100101101001101 = {} local function BLDebug0111110001000100100111100100110101110(BLDebug1110001010100101001001100111111) if (type(BLDebug1110001010100101001001100111111) == "table" or type(BLDebug1110001010100101001001100111111) == "function" or type(BLDebug1110001010100101001001100111111) == "userdata") then return nil else return true end end local function BLDebug01111010001111011111000(BLDebug1110001010100101001001100111111) if (not BLDebug1110001010100101001001100111111) then BLDebug1110001010100101001001100111111 = "(nil)" elseif (not BLDebug0111110001000100100111100100110101110(BLDebug1110001010100101001001100111111)) then BLDebug1110001010100101001001100111111 = "("..type(BLDebug1110001010100101001001100111111)..")" end return BLDebug1110001010100101001001100111111 end local function BLDebug10110011101110000001000(BLDebug1110001010100101001001100111111) if (type(BLDebug1110001010100101001001100111111) == "table") then local BLDebug000011011110000100111110111111111 = "{ " local BLDebug10101110111101111110100110 = "" local BLDebug0100001001111100011001011, BLDebug0111000100101100111111101011010111101 for BLDebug0100001001111100011001011, BLDebug0111000100101100111111101011010111101 in pairs(BLDebug1110001010100101001001100111111) do if (type(BLDebug0111000100101100111111101011010111101) == "table") then BLDebug000011011110000100111110111111111 = BLDebug000011011110000100111110111111111 .. BLDebug10101110111101111110100110 .. BLDebug0100001001111100011001011 .. " => " .. BLDebug10110011101110000001000(BLDebug0111000100101100111111101011010111101) else BLDebug000011011110000100111110111111111 = BLDebug000011011110000100111110111111111 .. BLDebug10101110111101111110100110 .. BLDebug0100001001111100011001011 .. " => " .. BLDebug10110011101110000001000(BLDebug0111000100101100111111101011010111101) end BLDebug10101110111101111110100110 = ", " end BLDebug000011011110000100111110111111111 = BLDebug000011011110000100111110111111111 .. " }" return BLDebug000011011110000100111110111111111 else return tostring(BLDebug01111010001111011111000(BLDebug1110001010100101001001100111111)) end end local function BLDebug01100100011100010001110(BLDebug01000100000111001111011000010) local BLDebug001000110001100000110110000110 = "" local BLDebug000111000101111100110001000111111 = 0 local BLDebug10001101010001101001011100010001 = 0 local BLDebug1010000001000110111101010111110 = 0 BLDebug01000100000111001111011000010 = floor(BLDebug01000100000111001111011000010) if (BLDebug01000100000111001111011000010 > 86400) then BLDebug01000100000111001111011000010 = mod(BLDebug01000100000111001111011000010, 86400) BLDebug00111001110001111101111101101000 = BLDebug00111001110001111101111101101000 + 1 end if (BLDebug01000100000111001111011000010 > 3600) then BLDebug000111000101111100110001000111111 = floor(BLDebug01000100000111001111011000010 / 3600) BLDebug01000100000111001111011000010 = mod(BLDebug01000100000111001111011000010, 3600) end if (BLDebug01000100000111001111011000010 >= 60) then BLDebug10001101010001101001011100010001 = floor(BLDebug01000100000111001111011000010 / 60) BLDebug01000100000111001111011000010 = mod(BLDebug01000100000111001111011000010, 60) end if (BLDebug01000100000111001111011000010 > 0) then BLDebug1010000001000110111101010111110 = BLDebug01000100000111001111011000010 end return string.format("%02d:%02d:%02d", BLDebug000111000101111100110001000111111, BLDebug10001101010001101001011100010001, BLDebug1010000001000110111101010111110) end local function BLDebug01101101101011101001010001111100(BLDebug00110111111010111110000, BLDebug101111000000110111111011101110, ...) if (BDebug.BLDebug111000011011100101101001101[BLDebug00110111111010111110000.BLDebug00001110111101101101111]) then local BLDebug01000100101000100111110101001100100010 for BLDebug01000100101000100111110101001100100010 = 1, arg.n, 1 do arg[BLDebug01000100101000100111110101001100100010] = BLDebug10110011101110000001000(arg[BLDebug01000100101000100111110101001100100010]) end local BLDebug01100001111001001011110001101010 = string.format(BLDebug101111000000110111111011101110, unpack(arg)) if (BDebug.BLDebug00110010101101100011101010010010000) then DEFAULT_CHAT_FRAME:AddMessage("|cff00c0c0["..BLDebug01100100011100010001110(GetTime()).."]|r " .. "<" .. BLDebug00110111111010111110000.BLDebug00001110111101101101111 .. "> " .. BLDebug01100001111001001011110001101010, NORMAL_FONT_COLOR.r, NORMAL_FONT_COLOR.g, NORMAL_FONT_COLOR.b) else DEFAULT_CHAT_FRAME:AddMessage("<"..BLDebug00110111111010111110000.BLDebug00001110111101101101111.."> "..BLDebug01100001111001001011110001101010, NORMAL_FONT_COLOR.r, NORMAL_FONT_COLOR.g, NORMAL_FONT_COLOR.b) end end end function BDebug:constructor(BLDebug00001110111101101101111) assert(BLDebug00001110111101101101111 and type(BLDebug00001110111101101101111) == "string", "You must specify a module name for using BDebug.") assert(not BDebug.BLDebug000100010001011010110110101[BLDebug00001110111101101101111], string.format("The specific module \"%s\" already exists.", BLDebug00001110111101101101111)) self.BLDebug00001110111101101101111 = BLDebug00001110111101101101111 BDebug.BLDebug000100010001011010110110101[BLDebug00001110111101101101111] = true end function BDebug:Print(BLDebug101111000000110111111011101110, ...) BLDebug01101101101011101001010001111100(self, BLDebug101111000000110111111011101110, unpack(arg)) end function BDebug:EnableModules(...) local BLDebug01000100101000100111110101001100100010 for BLDebug01000100101000100111110101001100100010 = 1, arg.n, 1 do assert(type(arg[BLDebug01000100101000100111110101001100100010]) == "string", "Invalid Parameter.") assert(BDebug.BLDebug000100010001011010110110101[arg[BLDebug01000100101000100111110101001100100010]], string.format("The module \"%s\" is not a valid module.", arg[BLDebug01000100101000100111110101001100100010])) BDebug.BLDebug111000011011100101101001101[arg[BLDebug01000100101000100111110101001100100010]] = true end end function BDebug:DisableModules(...) local BLDebug01000100101000100111110101001100100010 for BLDebug01000100101000100111110101001100100010 = 1, arg.n, 1 do assert(type(arg[BLDebug01000100101000100111110101001100100010]) == "string", "Invalid Parameter.") assert(BDebug.BLDebug000100010001011010110110101[arg[BLDebug01000100101000100111110101001100100010]], string.format("The module \"%s\" is not a valid module.", arg[BLDebug01000100101000100111110101001100100010])) BDebug.BLDebug111000011011100101101001101[arg[BLDebug01000100101000100111110101001100100010]] = nil end end function BDebug:EnableTime(BLDebug1100001110000100101111010011110110010) BDebug.BLDebug00110010101101100011101010010010000 = BLDebug1100001110000100101111010011110110010 end function BDebug:IsTimeEnabled() if (BDebug.BLDebug00110010101101100011101010010010000) then return true else return false end end BLibrary:Register(BDebug, "BDebug", BLDebug0011110010011010110001101, BLDebug100100110011110001011001110001000101) 
